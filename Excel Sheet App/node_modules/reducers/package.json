{
  "_args": [
    [
      {
        "raw": "reducers@github:raynos/reducers#dedup",
        "scope": null,
        "escapedName": "reducers",
        "name": "reducers",
        "rawSpec": "github:raynos/reducers#dedup",
        "spec": "github:raynos/reducers#dedup",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:raynos/reducers.git#dedup",
          "sshUrl": "git+ssh://git@github.com/raynos/reducers.git#dedup",
          "httpsUrl": "git+https://github.com/raynos/reducers.git#dedup",
          "gitUrl": "git://github.com/raynos/reducers.git#dedup",
          "shortcut": "github:raynos/reducers#dedup",
          "directUrl": "https://raw.githubusercontent.com/raynos/reducers/dedup/package.json"
        }
      },
      "C:\\Users\\rvadje\\Documents\\Demo Codes\\Excel Sheet App\\node_modules\\mongo-client"
    ]
  ],
  "_from": "raynos/reducers#dedup",
  "_id": "reducers@3.0.0-alpha",
  "_inCache": true,
  "_location": "/reducers",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reducers@github:raynos/reducers#dedup",
    "scope": null,
    "escapedName": "reducers",
    "name": "reducers",
    "rawSpec": "github:raynos/reducers#dedup",
    "spec": "github:raynos/reducers#dedup",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:raynos/reducers.git#dedup",
      "sshUrl": "git+ssh://git@github.com/raynos/reducers.git#dedup",
      "httpsUrl": "git+https://github.com/raynos/reducers.git#dedup",
      "gitUrl": "git://github.com/raynos/reducers.git#dedup",
      "shortcut": "github:raynos/reducers#dedup",
      "directUrl": "https://raw.githubusercontent.com/raynos/reducers/dedup/package.json"
    }
  },
  "_requiredBy": [
    "/buffer-reduce",
    "/mongo-client"
  ],
  "_resolved": "git://github.com/raynos/reducers.git#637bda2ef7845baceebe0fd0ad6cfde4cf289b36",
  "_shasum": "4d8805016205a84fef69a6329b32d2bd830aa67a",
  "_shrinkwrap": null,
  "_spec": "reducers@github:raynos/reducers#dedup",
  "_where": "C:\\Users\\rvadje\\Documents\\Demo Codes\\Excel Sheet App\\node_modules\\mongo-client",
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "bugs": {
    "url": "http://github.com/Gozala/reducers/issues/"
  },
  "dependencies": {
    "reducible": "github:raynos/reducible#v1.0.6"
  },
  "description": "Library for higher-order manipulation of collections",
  "devDependencies": {
    "phantomify": "~0.x.0",
    "retape": "~0.x.0",
    "tape": "~0.1.5",
    "test": "~0.5.2"
  },
  "gitHead": "637bda2ef7845baceebe0fd0ad6cfde4cf289b36",
  "homepage": "https://github.com/Gozala/reducers",
  "id": "reducers",
  "keywords": [
    "reducers",
    "reducible",
    "reduce",
    "data",
    "sequence",
    "stream",
    "collection",
    "transformation",
    "composable",
    "async",
    "signal",
    "manipulation"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Gozala/reducers/License.md"
    }
  ],
  "name": "reducers",
  "optionalDependencies": {},
  "readme": "# reducers\r\n\r\n[![Build Status](https://secure.travis-ci.org/Gozala/reducers.png)](http://travis-ci.org/Gozala/reducers)\r\n\r\n\r\n[![Browser support](http://ci.testling.com/Gozala/reducers.png)](http://ci.testling.com/Gozala/reducers)\r\n\r\n\r\n\r\nLibrary for higher-order manipulation of collections, based upon [reduce][].\r\n\r\n## Rationale\r\n\r\nMost functional languages (including beloved JS) typically come with some\r\ncollection transformation functions like [filter][] and [map][] that take a\r\nlogical collections and return transformed version of it. Unfortunately they\r\ntend to [complect][], by implying mechanism, order, laziness and\r\nrepresentation. This library is an attempt to provide simple solution for\r\nsome of the hard problems by decomplecting and building upon simple premise -\r\nminimum definition of collection is something that is reducible.\r\n\r\nMore specifically library defines super-generalized and minimal abstraction for\r\ncollections - a collection is some set of things that, when given a function to\r\napply to its contents, can do so and give you the result, i.e. a collection is\r\n(at minimum) **reducible**. In other words, you can call `reduce` on it.\r\n\r\nA very minimal abstraction for collection is more powerful than it may seem at\r\nfirst!\r\n\r\n## Basics\r\n\r\nDemonstration of features of this library requires some basic understanding of\r\nthe abstraction above. So let's take a more practical look at the idea. Let's\r\nsay we have a `reduce` function with *(very familiar)* API:\r\n\r\n```js\r\nreduce(source, f, initial) // => accumulated result\r\n```\r\n\r\nIt takes reducing function, a reducible `source` and `initial` value to\r\naccumulate reductions upon. In return it outputs an accumulated result.\r\nReducing functions performing accumulation have a following shape:\r\n\r\n```js\r\nf(result, value) // => new result\r\n```\r\n\r\nA reducing function is simply a binary function, akin to the one you might pass\r\nto reduce. While the two arguments might be treated symmetrically by the\r\nfunction, there is an implied semantic that distinguishes the arguments:\r\nthe first argument is a `result` or accumulator that is being built up by the\r\nreduction, while the second is some new input `value` from the source being\r\nreduced.\r\n\r\n## Transformations\r\n\r\nAll of the collection operations can be expressed in terms of transformations.\r\nBy the definition all transformations will produce **reducible** collections\r\nthat can be reduced via `reduce` function defined above:\r\n\r\n```js\r\nmap(source, JSON.parse) // => reducible collection\r\nfilter(numbers, isEven) // => reducible collection\r\n```\r\n\r\nIn order to explain transformations we'll need a primitive API for producing\r\n**reducible** collections. Let's define one in form of `reducible` function\r\nthat takes `accumulator` function and returns something that can be reduced\r\nvia `reduce` function:\r\n\r\n\r\n```js\r\nreducible(accumulator) // => reducible\r\n```\r\n\r\nArgument it takes, `accumulator` is a function that performs has following shape:\r\n\r\n```js\r\naccumulate(next, initial) // => accumulated result\r\n```\r\n\r\nAnd when invoked it performs reductions via `next` reducing function starting\r\nfrom `initial` result.\r\n\r\n\r\nNow consider following implementation of `map` & `filter` transformation\r\nfunctions:\r\n\r\n```js\r\nfunction map(f, source) {\r\n  return reducible(function accumulator(next, initial) {\r\n    return reduce(source, function reducer(result, input) {\r\n      return next(result, f(input))\r\n    }, initial)\r\n  })\r\n}\r\n\r\nfunction filter(predicate, source) {\r\n  return reducible(function accumulator(next, initial) {\r\n    return reduce(source, function reducer(result, input) {\r\n      return predicate(input) ? next(result, input) : result\r\n    }, initial)\r\n  })\r\n}\r\n```\r\n\r\nThere are a few things to note here:\r\n\r\n  - Type of the source is irrelevant as long as it is reducible and there for\r\n    can be reduced via `reduce` function.\r\n  - Transformations do not traverse collections, instead they compose results\r\n    that can be reduced by a receiver of the result later.\r\n  - Transformations do not imply timing in which `reducer` in invoked with an\r\n    each `input` of the `source`, there for `source` can be asynchronous.\r\n  - Filtering can *skip* inputs by simply returning the incoming result.\r\n\r\n\r\n## Features\r\n\r\n### Laziness\r\n\r\nLibrary consists of transformation functions which, as seen above, when called\r\ndo nothing except the creation of a recipe for a new collection, a recipe that\r\nis itself reducible. No work is done yet to the contained elements and no\r\nconcrete collection is produced. All the transformations defer actual work\r\nto a point where result of transformations pipeline is being reduced.\r\n\r\nThe beautiful thing is that this mechanism also works for all other traditional\r\ntransformations `take`, `drop`, `merge` etc. Note the fact that `filter` is\r\n(potentially) contractive, and flatten is (potentially) expansive per step -\r\nthe mechanism is general and not limited to 1:1 transformations.\r\n\r\n### Uniformity\r\n\r\nTransformation functions are absolutely agnostic of the actual type of the\r\n`source`, as they just describe transformations and leave it up to `source`\r\nto do a reduction when result is consumed.\r\n\r\nLibrary takes a advantage of this feature and takes it even step further by\r\ntreating every possible value as a reducible collection. Non collection values\r\nlike numbers, booleans, objects etc. are treated as collection of single item,\r\nitem being a value. Also `null` and `undefined` are considered as empty\r\ncollections.\r\n\r\nThis means that library can be used on any data type and more importantly\r\ntransformations between different data types & compose naturally, which is\r\ngreat, let's you define logic in terms of abstractions instead of specific\r\ntypes.\r\n\r\n### Composability\r\n\r\nAll the transformations are fully composable as a matter of fact transformation\r\npipelines produce compositions equivalent of a function compositions created by\r\na [compose][]. Also type agnostic nature of the transformation functions enables\r\ncompositions between different types of data.\r\n\r\n### Performance\r\n\r\nSince transformations doesn't do the work, but merely create a recipe, there is\r\nno per-step allocation overhead, so it's faster. Also note that transformations\r\nare composed by curring transformation functions and all the actual work happens\r\nin a pipe line at the end when result is consumed, which means that no\r\nintermediate collections are produced, unlike it's a case with arrays etc..\r\n\r\nThink [monad][] & [category theory][] if you fancy that.\r\n\r\nIt can even [outperform arrays][benchmarks] when used wisely, although it's not\r\nthe point & arrays are not the primary use case.\r\n\r\n### Asynchronicity\r\n\r\nAs it was already pointed out transformation functions do not imply any timing\r\nof individual value delivery, which means they can be used on asynchronous\r\ndata structures like [node streams][stream-reduce] or [FRP][] events & signals.\r\n\r\nThis feature is extremely powerful as it allows structuring complex asynchronous\r\nprograms in simple intuitive code without a [callback hell][] and manual error\r\npropagation. _See [lstree][] for examples_.\r\n\r\nEven better actually exact same code can be used with both synchronous and\r\nasynchronous data structures. For example exact same code in [fs-reduce][]\r\ncan be forced to do blocking IO by via `options.sync` option.\r\n\r\n### Extensibility\r\n\r\nSince transformations are `source` type agnostic it's highly extensible. In\r\nfact implementation is based of polymorphic [method][] dispatch library and\r\nenables one to add support for new data types without any changes to this\r\nlibrary or data types / classes them self. This feature is used by\r\n[stream-reduce][] library to add support for node streams. There are more\r\nexamples of this feature in [callback-reduce][], [dom-reduce][],\r\n[http-reduce][]...\r\n\r\nVery likely all data types like `signal` provided by this library will be move\r\nout into own libraries too.\r\n\r\n### Automatic disposal\r\n\r\nReducible data structures feature auto cleanup of the resources at the end of\r\nconsumption. For example [dom-reduce][] and [fs-reduce][] use this feature to\r\nremove event listeners / close file descriptors once input is consumed and to\r\nset you free from clean up constraints. This means you spend more time on\r\nactual problems rather and less on plumbing.\r\n\r\n### Infinity\r\n\r\nInfinite data structures can be trivially represented via reducibles since\r\nnothing implies the end. In fact [dom-reduce][] uses this feature to represent\r\nuser events in form of reducibles that pretty much can be infinite.\r\n\r\nThat being said reducibles are not the best abstraction for the some types of\r\ninfinite data structures specially ones that rather better be polled instead.\r\n\r\n## F.A.Q.\r\n\r\n\r\n##### 1. Q: Can this handle \"back pressure\" ?  \r\n   \r\n**A:** Short answer is **Yes**.\r\n\r\nSee [IO Coordination] for more detailed answer\r\n\r\n\r\n\r\n\r\n## Install\r\n\r\n    npm install reducers\r\n\r\n## Prior art\r\n\r\n- [Clojure reducers][]\r\n- [Haskell Enumerator/Iteratee][]\r\n\r\n[Clojure reducers]:http://clojure.com/blog/2012/05/15/anatomy-of-reducer.html\r\n[Haskell Enumerator/Iteratee]:http://www.haskell.org/haskellwiki/Enumerator_and_iteratee\r\n\r\n[reduce]:http://en.wikipedia.org/wiki/Reduce_%28higher-order_function%29\r\n[map reduce]:http://en.wikipedia.org/wiki/MapReduce\r\n[map]:https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\r\n[filter]:https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\r\n[Uniformity]:http://en.wikipedia.org/wiki/Uniformity_%28complexity%29#Uniformity\r\n[complect]:http://www.infoq.com/presentations/Simple-Made-Easy\r\n[compose]:http://underscorejs.org/#compose\r\n[monad]:http://en.wikipedia.org/wiki/Monad_%28category_theory%29\r\n[Category theory]:http://en.wikipedia.org/wiki/Category_theory]\r\n[benchmarks]:http://jsperf.com/reducibles/4\r\n[stream-reduce]:https://github.com/Gozala/stream-reduce\r\n[FRP]:http://en.wikipedia.org/wiki/Functional_reactive_programming\r\n[method]:https://github.com/Gozala/method\r\n[callback-reduce]:https://github.com/Gozala/callback-reduce\r\n[dom-reduce]:https://github.com/Gozala/dom-reduce\r\n[http-reduce]:https://github.com/Gozala/http-reduce\r\n[callback hell]:http://callbackhell.com/\r\n[fs-reduce]:https://github.com/Gozala/fs-reduce\r\n[lstree]:https://github.com/Gozala/callback-reduce\r\n\r\n[IO Coordination]:https://github.com/Gozala/reducers/wiki/IO-Coordination\r\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Gozala/reducers.git",
    "web": "https://github.com/Gozala/reducers"
  },
  "scripts": {
    "test": "npm run test-node && npm run test-browser && npm run test-tap",
    "test-browser": "node ./node_modules/phantomify/bin/cmd.js ./test/common-index.js",
    "test-node": "node ./test/common-index.js",
    "test-tap": "node ./test/tap-index.js"
  },
  "testling": {
    "files": "test/tap-index.js",
    "browsers": {
      "iexplore": [
        9,
        10
      ],
      "chrome": [
        16,
        20,
        25,
        "canary"
      ],
      "firefox": [
        10,
        15,
        16,
        17,
        18,
        "nightly"
      ],
      "safari": [
        5,
        6
      ],
      "opera": [
        12
      ]
    }
  },
  "version": "3.0.0-alpha"
}
